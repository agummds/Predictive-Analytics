# -*- coding: utf-8 -*-
"""Predictive Analytics-Agum Medisa

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18fUXf1gMalMC1GuyMEziFjq4G0Y-pkbh

# **Tentang Dataset**
Dataset "Stunting Toddler (Balita) Detection" ini kumpulan data berdasarkan rumus z-score penentuan stunting menurut WHO (World Health Organization), yang berfokus pada deteksi stunting pada balita (bayi dibawah lima tahun). Dataset ini terdiri dari 121.000 baris data, yang merinci informasi mengenai umur, jenis kelamin, tinggi badan, dan status gizi balita. Dataset ini bertujuan untuk membantu peneliti, ahli gizi, dan pembuat kebijakan dalam memahami dan mengatasi masalah stunting pada anak-anak di bawah lima tahun.

**Rincian Kolom Dataset:**

- **Umur (Bulan)**: Mengindikasikan usia balita dalam bulan. Rentang usia ini penting untuk menentukan fase pertumbuhan anak dan membandingkannya dengan standar pertumbuhan yang sehat. **(Umur 0 sampai 60 bulan)**

- **Jenis Kelamin**: Terdapat dua kategori dalam kolom ini, 'laki-laki' (male) dan 'perempuan' (female). Jenis kelamin merupakan faktor penting dalam analisis pola pertumbuhan dan risiko stunting.

- **Tinggi Badan**: Dicatat dalam centimeter, tinggi badan adalah indikator utama untuk menilai pertumbuhan fisik balita. Data ini memungkinkan peneliti untuk menentukan apakah pertumbuhan anak sesuai dengan standar usianya.

- **Status Gizi**: Kolom ini dikategorikan menjadi 4 status - 'severely stunting', 'stunting', 'normal', dan 'tinggi'. 'Severely stunting' menunjukkan kondisi sangat serius (<-3 SD), 'stunting' menunjukkan kondisi stunting (-3 SD sd <-2 SD), 'normal' mengindikasikan status gizi yang sehat (-2 SD sd +3 SD), dan 'tinggi' (height) menunjukkan pertumbuhan di atas rata-rata (>+3 SD). Kategori ini membantu dalam identifikasi cepat dan intervensi bagi anak-anak yang berisiko atau mengalami masalah pertumbuhan.

# **Import Library**
"""

from google.colab import userdata
import os
import random
import textwrap
import numpy as np
import pandas as pd
import seaborn as sns
import xgboost as xgb
import matplotlib.pyplot as plt
from xgboost import XGBClassifier
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import mean_squared_error
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import GridSearchCV, RandomizedSearchCV, train_test_split, cross_val_score
from sklearn.preprocessing import LabelEncoder, OrdinalEncoder, OneHotEncoder, StandardScaler
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

"""# **Dataset**"""

url = 'https://raw.githubusercontent.com/agummds/Predictive-Analytics/master/Dataset/data_balita.csv'

df = pd.read_csv(url)
df.head(20)

df.tail()

"""# **Exploratory Data Analysis (EDA)**

## a. Cek struktur dan informasi awal data
"""

df.info()
df.describe()

"""## b. Distribusi Status Gizi"""

sns.countplot(data=df, x='Status Gizi')

"""## c. Distribusi Umur dan Tinggi Badan"""

sns.histplot(df['Umur (bulan)'], bins=20)
sns.histplot(df['Tinggi Badan (cm)'], kde=True)

"""## d. Cek rata-rata tinggi & umur per kategori status gizi."""

df.groupby('Status Gizi')[['Umur (bulan)', 'Tinggi Badan (cm)']].describe()

"""## h.  Encode kolom kategorikal dan cek korelasi"""

df_encoded = df.copy()
le_gender = LabelEncoder()
le_status = LabelEncoder()

df_encoded['Jenis Kelamin'] = le_gender.fit_transform(df_encoded['Jenis Kelamin'])
df_encoded['Status Gizi'] = le_status.fit_transform(df_encoded['Status Gizi'])

# Sekarang bisa cek korelasi
import seaborn as sns
import matplotlib.pyplot as plt

corr = df_encoded.corr()
sns.heatmap(corr, annot=True, cmap='coolwarm')
plt.title("Correlation Matrix")
plt.show()

"""# **Univariate Analysis**

## 1. Umur (bulan) — numerik
"""

sns.histplot(df['Umur (bulan)'], bins=30, kde=True)
plt.title('Distribusi Umur')

"""## 2. Tinggi Badan (cm) — numerik"""

sns.boxplot(x=df['Tinggi Badan (cm)'])
plt.title('Boxplot Tinggi Badan')

"""## 3. Jenis Kelamin — kategorikal"""

sns.countplot(x='Jenis Kelamin', data=df)
plt.title('Distribusi Jenis Kelamin')

"""# Multivariate Analysis EDA

## 1. Umur vs Tinggi Badan (scatter plot)
"""

sns.scatterplot(data=df, x='Umur (bulan)', y='Tinggi Badan (cm)', hue='Status Gizi')
plt.title('Umur vs Tinggi Badan per Status Gizi')

"""## 2. Jenis Kelamin vs Status Gizi (countplot with hue)"""

sns.countplot(data=df, x='Jenis Kelamin', hue='Status Gizi')
plt.title('Distribusi Status Gizi per Jenis Kelamin')

"""## 3. Boxplot Tinggi Badan berdasarkan Status Gizi"""

sns.boxplot(data=df, x='Status Gizi', y='Tinggi Badan (cm)')
plt.title('Tinggi Badan per Kategori Status Gizi')

"""## 4. Pairplot (semua kombinasi numerik)"""

df_encoded = df.copy()
df_encoded['Jenis Kelamin'] = LabelEncoder().fit_transform(df_encoded['Jenis Kelamin'])
df_encoded['Status Gizi'] = LabelEncoder().fit_transform(df_encoded['Status Gizi'])

sns.pairplot(df_encoded, hue='Status Gizi')

"""# Model Persiapan"""

df_encoded.head()

df_encoded.tail()

"""## Pembagian Dataset"""

X = df[['Umur (bulan)', 'Jenis Kelamin', 'Tinggi Badan (cm)']]
y = df['Status Gizi']

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

"""##  Model Training dan Evaluasi

## a. Decision Tree Classifier
"""

# Create a LabelEncoder object
le_gender = LabelEncoder()

# Encode fitur 'Jenis Kelamin'
X_train['Jenis Kelamin'] = le_gender.fit_transform(X_train['Jenis Kelamin'])
X_test['Jenis Kelamin'] = le_gender.transform(X_test['Jenis Kelamin'])

# Train Decision Tree
dt_model = DecisionTreeClassifier(random_state=42)
dt_model.fit(X_train, y_train)

# Predict
y_pred_dt = dt_model.predict(X_test)

# Decode y_test ke label string
y_test_labels = le_status.inverse_transform(y_test)

# Evaluation
print("Decision Tree Classifier:")
print(classification_report(y_test_labels, y_pred_dt))

"""## b. Random Forest Classifier"""

# Initialize Random Forest Classifier
rf_model = RandomForestClassifier(random_state=42)

# Train model
rf_model.fit(X_train, y_train)

# Predict
y_pred_rf = rf_model.predict(X_test)

# Decode y_test ke label string
y_test_labels = le_status.inverse_transform(y_test)

# Evaluation
print("Random Forest Classifier:")
print(classification_report(y_test_labels, y_pred_rf))

"""## c. XGBoost Classifier"""

# Create a LabelEncoder for the 'Status Gizi' column
le_status = LabelEncoder()

# Apply Label Encoding to the 'Status Gizi' column in the original DataFrame before splitting
df['Status Gizi'] = le_status.fit_transform(df['Status Gizi'])

# Create a LabelEncoder object for 'Jenis Kelamin'
le_gender = LabelEncoder()

# Fit the encoder on the training data and transform both train and test data
X_train['Jenis Kelamin'] = le_gender.fit_transform(X_train['Jenis Kelamin'])
X_test['Jenis Kelamin'] = le_gender.transform(X_test['Jenis Kelamin'])

# Initialize XGBoost Classifier
xgb_model = xgb.XGBClassifier(random_state=42)

# Train model
xgb_model.fit(X_train, y_train)

# Predict and evaluate
y_pred_xgb = xgb_model.predict(X_test)
print("XGBoost Classifier:")
print(classification_report(y_test, y_pred_xgb))

print("Prediksi Decision Tree:")
print(np.unique(y_pred_dt, return_counts=True))

print("Prediksi Random Forest:")
print(np.unique(y_pred_rf, return_counts=True))

"""# Evaluasi Model: Penerapan Metrik Kinerja & Visualisasi Model

## Langkah 1: Evaluasi dengan Metrik Kinerja
"""

# Mengumpulkan akurasi dari setiap model
# Create a dictionary to store the models and their predictions
models = {
    "Decision Tree": dt_model,
    "Random Forest": rf_model,
    "XGBoost": xgb_model
}

# Get predictions for each model
predictions = {name: model.predict(X_test) for name, model in models.items()}

# Calculate accuracies
accuracies = [accuracy_score(y_test, predictions[name]) for name in models]
model_names = list(models.keys())

# Membuat DataFrame untuk akurasi model
accuracy_df = pd.DataFrame({'Model': model_names, 'Accuracy': accuracies})

# Visualisasi akurasi menggunakan seaborn
plt.figure(figsize=(8, 4))
ax = sns.barplot(x='Model', y='Accuracy', data=accuracy_df, palette='coolwarm')
ax.set_ylim(0.7, 1.0)  # Set limit y-axis untuk memudahkan perbandingan
ax.set_title('Comparison of Model Accuracies')
ax.set_ylabel('Accuracy')
ax.set_xlabel('Model')

# Menambahkan teks akurasi pada setiap batang
for p in ax.patches:
    ax.annotate(format(p.get_height(), '.2f'),
                (p.get_x() + p.get_width() / 2., p.get_height()),
                ha = 'center', va = 'center',
                xytext = (0, 9),
                textcoords = 'offset points')
plt.show()

print(accuracy_df)

"""## Langkah 2: Visualisasi Akurasi Model"""

# Plot akurasi model
plt.figure(figsize=(8, 6))
# Replace model_scores with accuracy_df
plt.bar(accuracy_df['Model'], accuracy_df['Accuracy'], color=['blue', 'green', 'orange'])
plt.title("Perbandingan Akurasi Model")
plt.ylabel("Akurasi")
plt.ylim(0, 1)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

from sklearn.metrics import confusion_matrix
import seaborn as sns
cm = confusion_matrix(y_test_labels, y_pred_xgb)
sns.heatmap(cm, annot=True, fmt='d')